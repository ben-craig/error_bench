<pre class='metadata'>
Title: Error speed benchmarking
Shortname: D????
Revision: 0.0
Audience: WG21; DG
Status: D
Group: WG21
URL: https://wg21.link/P????
!Source: <a href="https://github.com/ben-craig/error_bench/blob/master/bench_blog.bs">???</a>
Editor: Ben Craig, National Instruments, ben.craig@gmail.com
Abstract: The author measures the speed of various error handling approaches.  Abort and x64 exceptions are fast on the happy path.  Error code strategies are fast on the sad path.
Markup Shorthands: markdown yes
</pre>
<script src="echarts_modified.js"></script>
<script type="text/javascript">
</script>

<style>
blockquote.book {
  display: block;
  border-width: 2px 0;
  border-style: solid;
  border-color: #eee;
  padding: 1.5em 5em 0.5em 5em;
  margin: 1.5em 0;
  position: relative;
  text-align: justify;
}
blockquote.book:before {
  content: '\201C';
  position: absolute;
  top: 0em;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #fff;
  width: 3rem;
  height: 2rem;
  font: 6em/1.08em 'PT Sans', sans-serif;
  color: #666;
  text-align: center;
}
blockquote.book:after {
  content: '\201D';
  position: absolute;
  bottom: -0.25em;
  left: 50%;
  transform: translate(-50%, -50%);
  background: #fff;
  width: 3rem;
  height: 2rem;
  font: 6em/1.08em 'PT Sans', sans-serif;
  color: #666;
  text-align: center;
}
cite {
  display: block;
  text-align: right;
  color: #e74c3c;
  margin: 0 -5em 1em 0;
}
</style>

Introduction {#intro}
====================================
In this paper, we will look at the relative speeds of error handling strategies in micro-benchmarking scenarios.  "Happy" and "sad" path timings will be presented.

Measuring methodology {#methodology}
====================================
All benchmarks lie.  It's important to know how a benchmark is set up so that the useful parts can be distinguished from the misleading parts.

Gathering representative timings for very small pieces of code is difficult on modern hardware.  One type of micro-architectural quirk that makes these measurements very painful is code alignment [[Bakhvalov]].  Each call and each branch can introduce stalls if jumping to a poorly aligned location.  These stalls can dominate the timings.  The author has seen code alignment differences swing a benchmark running at 451 cycles per iteration to 310 cycles per iteration, for a 45% increase in execution time.  This involved no system calls, no atomic operations, no divisions, or any other highly expensive operations being performed.

This research used a novel technique to get representative timings across a wide range of jump alignments.  At the beginning of each function, a random number of `nop` instructions (0 to 31 inclusive) were inserted.  A matching set of `nop` instructions were inserted at a later point in the execution path so that a total of 31 user inserted `nop` instructions were always executed.  1024 instances of this program, all with different layouts of nops, were then built and run.

Tests were built to optimize for speed.  The test case optimizes away in the face of link-time optimizations (LTO) / whole program optimizations, so they were not used.  Some compilers only support profile-guided optimizations (PGO) after turning on link-time optimizations, so PGO wasn't used either.  Only the exception cases were built with exceptions turned on.

For all but the exception failure cases, 16K warm-up iterations were run before starting timing.  Within the timer bounds, 512K iterations of the test case were run.  The exception failure cases only had 256 warm-up iterations and 16K timed iterations, due to just how slow throwing an exception can be.

All tests were run on the same machine. TODO DETAILS.  C-States, Hyper-threading, and Turbo Boost were all disabled in order to improve benchmark reproducibility.

Starter test case for on-line analysis {#starter_case}
=====================
To start with, we will look at code similar to the following:
```
struct Dtor\[N] {
  extern ~Dtor\[N]() {
    /* Random number of NOPs K\[N] := [0,31] */
  }
};
struct inline_nops {
  inline inline_nops() {
    /* Random number of NOPs Z := [0,31] */
  }
  inline ~inline_nops() {
    /* 31 - Z NOPs */
  }
};
int global_int = 0;
int callee(bool do_err) {
  inline_nops n;
  if(do_err)
    return 1;
  return 0;
}
int caller\[N](bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(do_err);
  if(e) return e;
  global_int = 0;
  return 0;
}
int main() { 
  /* Test happy path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](false);
  
  startTimer();
  /* X NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](false);
  }
  /* 31 - X NOPs */
  endTimer();
  print(duration() / ITERATIONS);

  /* Test sad path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](true);
  
  startTimer();
  /* Y NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](true);
  }
  /* 31 - Y NOPs */
  endTimer();
  print(duration() / ITERATIONS);
}
```
This code has some important properties for future comparisons.
* `callee()` will raise an error based off of runtime state
* `caller\[N]()` needs to clean up the `d` object in error and non-error conditions.
* `caller\[N]()` should only set `global_int` in success cases.
* The inserted NOPs allow us to sample various alignments while keeping the same program structure.

In the actual tests all the function bodies are in separate .cpp files, and link-time / whole-program optimizations aren't used.  If they had been used, the entire program would get optimized away, removing our ability to measure error handling differences.

The initial part of this paper is only looking at three types of error handling.
* abort: When an error is encountered, kill the program with `std::abort`.  No "sad" path benchmarks were taken for this case.
* return_val: Return an integer error code, where zero represents success.
* throw_exception: Throw an exception deriving from std::exception, that contains only an int.  This should represent typical exception usage cases.  The exception is only caught with a `catch(...)`.

The actual code used for the benchmark can be found [on my github](https://github.com/ben-craig/error_bench/tree/err_gauss/src/err_gauss__) TODO.

Happy path measurements {#happy_path_measurements}
============================

Abort and x64 exceptions are consistently faster than return codes.  Windows x86 exceptions are slower than both return codes and abort semantics.  While return codes are slower than abort and x64 exceptions, they aren't much slower.  The cost ranges from less than a cycle per function to four cycles per function in my experiments.

Write to a global {#write_to_a_global}
-----------------------
<p align="center">Write to global: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART


Write through an argument {#write_through_an_argument}
---------------------------------------------
Instead of writing to a global, we write through a pointer argument. 
```
int callee(int *val, bool do_err) {
  (void)val;
  inline_nops n;
  if(do_err)
    return 1;
  return 0;
}
int caller\[N](int *val, bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(val, do_err);
  if(e) return e;
  *val = 0;
  return 0;
}
```
<p align="center">Write through argument: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART

"Return" a value {#return_a_value}
---------------------------------------------
In this case, we'll use the output channel available to us to "return" an incremented value.  When handling errors in an error code fashion, we end up using an output parameter.
```
int callee(int *val, bool do_err) {
  inline_nops n;
  if(do_err)
    return 1;
  *val = 0;
  return 0;
}
int caller\[N](int *val, bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  int out_val; /* TODO: Bench this version without the init */
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(&out_val, do_err);
  if(e) return e;
  *val = out_val + 1;
  return 0;
}
```
<p align="center">Return a value: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART

Sad path measurements {#sad_path_measurements}
============================

Sad path timings for abort aren't shown, as the recovery path is very system specific.  Throwing an exception is more than 100x slower than returning an error code.

Write to a global {#sad_write_to_a_global}
-----------------------
<p align="center">Write to a global, sad path: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART

Write through an argument {#sad_write_through_an_argument}
---------------------------------------------
<p align="center">Write through an argument, sad path: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART

"Return" a value {#sad_return_a_value}
---------------------------------------------
<p align="center">Return a value, sad path: Median cycles per iteration.  A histogram can be found [here](#TODO)</p>
TODO: INSERT CHART

Happy path off-line analysis {#happy_path_analysis}
============================

LLVM-MCA [[MCA]] is a tool that will analyze assembly and provide statistics on a hypothetical execution on a specific simulated CPU.  This can be used to provide a hardware independent analysis of generated code.  There is at least one substantial limitation though, in that calls and returns are typically not modeled.  Regardless, the analysis is still useful.

I focused on analyzing the difference between exception builds and abort / no exception builds, all in an error neutral function.  In the off-line analysis, I'm only focused on 64-bit x86-64 (Clang, GCC, and MSVC) and 64-bit ARM (Clang and GCC).  Exceptions on 32-bit x86 on Windows is so much slower in the happy path that it isn't interesting to dive in at the assembly level.

In general, there are some minor missed optimization opportunities in some of the smallest error handling examples.

I will be looking at this code snippet:
```
struct Dtor {~Dtor();};
void callee();
int global;
void caller() {
  Dtor d;
  callee();
  global = 0;
}
```

<table>
  <tr>
    <th>Compiler</th>
    <th>Exceptions</th>
    <th>No exceptions</th>
  </tr>
  <tr>
    <td>MSVC x64</td>
    <td><code><pre>sub rsp, 40
call void callee(void)<b>
; Note the ordering difference
mov DWORD PTR int global, 0
lea rcx, QWORD PTR d$[rsp]</b>
call Dtor::~Dtor(void)
add rsp, 40
ret 0</pre></code></td>
    <td><code><pre>sub rsp, 40
call void callee(void)<b>
; Note the ordering difference
lea rcx, QWORD PTR d$[rsp]
mov DWORD PTR int global, 0</b>
call Dtor::~Dtor(void)
add rsp, 40
ret 0</pre></code></td>
  </tr>
</table>
With MSVC x64, we get almost identical codegen between code with exceptions and without.  On MSVC x64, there are some optimization passes that don't run when exceptions are turned on, and one of those passes is responsible for switching the order of the `lea` and `mov` instructions.  I have observed a 1-3 cycle difference in benchmark results just from switching the order of those two instructions.  In the data I am providing, this results in the exception based code being slightly faster than the abort based code.

<table>
  <tr>
    <th>Compiler</th>
    <th>Exceptions</th>
    <th>No exceptions</th>
  </tr>
  <tr>
    <td>Clang 9.0 x64</td>

    <td>1397 cycles over 100 iterations.<br/>
Counts on Intel IvyBridge architecture
<code><pre>pushq %rbx
subq $16, %rsp
callq callee()
movl $0, global(%rip)
leaq 8(%rsp), %rdi
callq Dtor::~Dtor()
addq $16, %rsp
popq %rbx
retq</pre></code></td>

    <td>1199 cycles over 100 iterations.<br/>
Counts on Intel IvyBridge architecture
<code><pre>pushq %rax
; no subq here
callq callee()
movl $0, global(%rip)
movq %rsp, %rdi ; movq instead of leaq
callq Dtor::~Dtor()
; no addq here
popq %rax
retq</pre></code></td>

  </tr>
  <tr>
    <td>GCC 8.2 x64</td>
    <td>1397 cycles over 100 iterations.<br/>
Counts on Intel IvyBridge architecture
<code><pre>pushq %rbx
subq $16, %rsp
call callee()
; ordering difference
movl $0, global(%rip)
leaq 15(%rsp), %rdi
call Dtor::~Dtor()
addq $16, %rsp
popq %rbx
ret</pre></code></td>
    
    <td>752 cycles over 100 iterations.<br/>
Counts on Intel IvyBridge architecture
<code><pre>; no pushq
subq $24, %rsp
call callee()
; ordering difference
leaq 15(%rsp), %rdi
movl $0, global(%rip)
call Dtor::~Dtor()
addq $24, %rsp
; no popq
ret</pre></code></td>

  </tr>
</table>
x64 GCC and Clang both generate slower code for this use case when exceptions are enabled.  This is a missed optimization, but isn't inherent to the design of exceptions.

In my timings, GCC's abort code was 2 cycles faster than GCC's exception code.  Clang's abort code was 5 cycles faster than Clang's exception code.

<table>
  <tr>
    <th>Compiler</th>
    <th>Exceptions</th>
    <th>No exceptions</th>
  </tr>
  <tr>
    <td>Clang 9.0 ARM64</td>

    <td>684 cycles over 100 iterations.<br/>
Counts on exynos-m5 architecture
<code><pre>str x19, [sp, #-32]!
stp x29, x30, [sp, #16]
add x29, sp, #16
bl callee()
adrp x8, global
add x0, sp, #8
str wzr, [x8, :lo12:global]
bl Dtor::~Dtor()
ldp x29, x30, [sp, #16]
ldr x19, [sp], #32
ret</pre></code></td>

    <td>665 cycles over 100 iterations.<br/>
Counts on exynos-m5 architecture
<code><pre>sub sp, sp, #32 // sub instead of str
stp x29, x30, [sp, #16]
add x29, sp, #16
bl callee()
adrp x8, global
add x0, sp, #8
str wzr, [x8, :lo12:global]
bl Dtor::~Dtor()
ldp x29, x30, [sp, #16]
add sp, sp, #32 // add instead of ldr
ret</pre></code></td>

  </tr>
  <tr>
    <td>GCC 8.2 ARM64</td>
    <td>639 cycles over 100 iterations.<br/>
Counts on exynos-m5 architecture
<code><pre>stp x29, x30, [sp, -48]!
mov x29, sp
bl callee()
adrp x1, .LANCHOR0
add x0, sp, 40
str wzr, [x1, #:lo12:.LANCHOR0]
bl Dtor::~Dtor()
ldp x29, x30, [sp], 48
ret</pre></code></td>
    
    <td>639 cycles over 100 iterations.<br/>
Counts on exynos-m5 architecture
<code><pre>stp x29, x30, [sp, -32]! // different constant
mov x29, sp
bl callee()
adrp x1, .LANCHOR0
add x0, sp, 24 // different constant
str wzr, [x1, #:lo12:.LANCHOR0]
bl Dtor::~Dtor()
ldp x29, x30, [sp], 32 // different constant
ret</pre></code></td>

  </tr>
</table>
ARM64 GCC and Clang both generate different code for this use case when exceptions are enabled.  This is likely another missed optimization.  With GCC, the only penalty that is paid is slightly more stack usage.

Conclusion {#conclusion}
========================

Conclusion {#TODO}
========================

Acknowledgments {#ack}
======================

Charts generated with [[ECharts]].

Appendix B: The build flags {#build_flags}
============================
MSVC {#msvc}
--------------------
The compiler and flags are the same for 32-bit and 64-bit builds, except that the 32-bit linker uses /machine:x86 and the 64-bit linker uses /machine:x64

Compiler marketing version: Visual Studio 2019

Compiler toolkit version: 14.20.27508

cl.exe version: 19.20.27508.1

Compiler codegen flags (no exceptions): /GR /Gy /Gw /O1 /MT /d2FH4 /std:c++latest /permissive- /DNDEBUG

Compiler codegen flags (with exceptions): /EHs /GR /Gy /Gw /O1 /MT /d2FH4 /std:c++latest /permissive- /DNDEBUG

Linker flags: /OPT:REF /release /subsystem:CONSOLE /incremental:no /OPT:ICF /NXCOMPAT /DYNAMICBASE /DEBUG *.obj

Clang x64 {#clang_x64}
----------------------
Toolchains used:
* Clang 8.0.0 and libc++
* System linker from Ubuntu 14.04.3's GCC 4.8.4 installation

Compiler codegen flags (no exceptions): -fno-exceptions -Os -ffunction-sections -fdata-sections -std=c++17 -stdlib=libc++ -static -DNDEBUG

Compiler codegen flags (exceptions): -Os -ffunction-sections -fdata-sections -std=c++17 -stdlib=libc++ -static -DNDEBUG

Linking flags: -Wl,--gc-sections -pthread -static -static-libgcc -stdlib=libc++ *.o libc++abi.a

GCC x64 {#gcc_x64}
------------------
Toolchain used: GCC 7.3.1 from the Red Hat Developer Toolset 7.1

Compiler codegen flags (no exceptions): -fno-exceptions -Os -ffunction-sections -fdata-sections -std=c++17 -static

Compiler codegen flags (exceptions): -Os -ffunction-sections -fdata-sections -std=c++17 -static

Linking flags: -Wl,--gc-sections -pthread -static -static-libgcc -static-libstdc++ *.o

Appendix C: The code {#code}
============================
As stated before, this isn't the exact code that was benchmarked.  In the benchmarked code, functions were placed in distinct translation units in order to avoid inlining.  The following code is provided to demonstrate what the error handling code looks like.

Common support code {#code_support}
---------------------------------------
<details>
<summary>Expand to see code snippets</summary>
**All cases**
```
struct Dtor\[N] {
  extern ~Dtor\[N]() {
    /* Random number of NOPs K\[N] := [0,31] */
  }
};
struct inline_nops {
  inline inline_nops() {
    /* Random number of NOPs Z := [0,31] */
  }
  inline ~inline_nops() {
    /* 31 - Z NOPs */
  }
};

int main() { 
  /* Test happy path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](false);
  
  startTimer();
  /* X NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](false);
  }
  /* 31 - X NOPs */
  endTimer();
  print(duration() / ITERATIONS);

  /* Test sad path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](true);
  
  startTimer();
  /* Y NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](true);
  }
  /* 31 - Y NOPs */
  endTimer();
  print(duration() / ITERATIONS);
}
```

**throw_exception**
```
class err_exception : public std::exception {
public:
  int val;
  explicit err_exception(int e) : val(e) {}
  const char *what() const noexcept override { return ""; }
};
```
</details>

Write to a global {#code_write_to_a_global}
---------------------------------------
<details>
<summary>Expand to see code snippets</summary>
**All cases**
```
int global_int = 0;
```

**return_val**
```
int callee(bool do_err) {
  inline_nops n;
  if(do_err)
    return 1;
  return 0;
}
int caller\[N](bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(do_err);
  if(e) return e;
  global_int = 0;
  return 0;
}
```

**abort, throw_exception**
```
void caller\[N](bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  NEXT_FUNC(do_err);
  global_int = 0;
}
```
**abort**
```
void callee(bool do_err) {
  inline_nops n;
  if(do_err)
    abort();
}
```
**throw_exception**
```
void callee(bool do_err) {
  inline_nops n;
  if(do_err)
    throw err_exception(1);
}
```
</details>

Write through an argument {#code_write_through_an_argument}
---------------------------------------
<details>
<summary>Expand to see code snippets</summary>
**Common main**
```
int main() { 
  int val=0;
  /* Test happy path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](&val, false);
  
  startTimer();
  /* X NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](&val, false);
  }
  /* 31 - X NOPs */
  endTimer();
  print(duration() / ITERATIONS);

  /* Test sad path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i)
    (void)caller\[0](&val, true);
  
  startTimer();
  /* Y NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    (void)caller\[0](&val, true);
  }
  /* 31 - Y NOPs */
  endTimer();
  print(duration() / ITERATIONS);
}
```

**return_val**
```
int callee(int *, bool do_err) {
  inline_nops n;
  if(do_err)
    return 1;
  return 0;
}
int caller\[N](int *val, bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(val, do_err);
  if(e) return e;
  *val = 0;
  return 0;
}
```

**abort, throw_exception**
```
void caller\[N](int *val, bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  NEXT_FUNC(val, do_err);
  *val = 0;
}
```
**abort**
```
void callee(int *, bool do_err) {
  inline_nops n;
  if(do_err)
    abort();
}
```
**throw_exception**
```
void callee(int *, bool do_err) {
  inline_nops n;
  if(do_err)
    throw err_exception(1);
}
```
</details>

"Return" a value {#code_return_a_value}
----------------------------------------
<details>
<summary>Expand to see code snippets</summary>
**return_val**
```
int callee(int *val, bool do_err) {
  inline_nops n;
  if(do_err)
    return 1;
  *val = 0;
  return 0;
}
int caller\[N](int *val, bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  int out_val; /* TODO: Bench this version without the init */
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  int e = NEXT_FUNC(&out_val, do_err);
  if(e) return e;
  *val = out_val + 1;
  return 0;
}
int main() { 
  /* Test happy path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i) {
    int val=0;
    (void)caller\[0](&val, false);
  }
  
  startTimer();
  /* X NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    int val=0;
    (void)caller\[0](&val, false);
  }
  /* 31 - X NOPs */
  endTimer();
  print(duration() / ITERATIONS);

  /* Test sad path */
  for (int i = 0; i < WARMUP_ITERATIONS; ++i) {
    int val=0;
    (void)caller\[0](&val, true);
  }
  
  startTimer();
  /* Y NOPs */
  for (int i = 0; i < ITERATIONS; ++i) {
    int val=0;
    (void)caller\[0](&val, true);
  }
  /* 31 - Y NOPs */
  endTimer();
  print(duration() / ITERATIONS);
}
```

**abort, throw_exception**
```
int caller\[N](bool do_err) {
  /* 31 - K\[N] NOPs */
  Dtor\[N] d;
  /* NEXT_FUNC is callee when N == 7, or caller[N+1] otherwise */
  return 1 + NEXT_FUNC(do_err);
}
```
**abort**
```
int callee(bool do_err) {
  inline_nops n;
  if(do_err)
    abort();
  return 0;
}
```
**throw_exception**
```
int callee(bool do_err) {
  inline_nops n;
  if(do_err)
    throw err_exception(1);
  return 0;
}
```
</details>

Appendix D: Histograms and alternative return code benchmarks {#histograms}
==========================================
Initial error neutral cost, linear {#linearneutral1}
----------------------------------------------------
<div id="CmpTermLinear" style="width: 100%;height:300px;"></div>
<script type="text/javascript">
  // based on prepared DOM, initialize echarts instance
  var myChart = echarts.init(document.getElementById('CmpTermLinear'));

  // specify chart configuration item and data
  var option = {
    tooltip: { formatter: myFormatter },
    calculable : true,
    legend: {
      type: 'scroll',
      right: 0,
      top: 0,
      orient: 'vertical',
    },
    xAxis: [{ type: 'value' }],
    yAxis: [{
      type: 'category',
      data: ['Clang','GCC','MSVC x64','MSVC x86']
    }],
    grid: {
      top: 0,
      left: 65,
      right: 200
    },
    dataZoom: [{show: true}],
    series: data_CmpTerm
  };

  // use configuration item and data specified to show chart
  myChart.setOption(option);
</script>
Initial cost of signaling an error, linear {#linearerror1}
------------------------------------
<div id="FirstErrorLinear" style="width: 100%;height:300px;"></div>
<script type="text/javascript">
  // based on prepared DOM, initialize echarts instance
  var myChart = echarts.init(document.getElementById('FirstErrorLinear'));

  // specify chart configuration item and data
  var option = {
    tooltip: { formatter: myFormatter },
    calculable : true,
    legend: {
      type: 'scroll',
      right: 0,
      top: 0,
      orient: 'vertical',
    },
    xAxis: [{type: 'value'}],
    yAxis: [{
      type: 'category',
      data: ['Clang','GCC','MSVC x64','MSVC x86']
    }],
    grid: {
      top: 0,
      left: 65,
      right: 200
    },
    dataZoom: [{show: true}],
    series: data_Cost1stError
  };

  // use configuration item and data specified to show chart
  myChart.setOption(option);
</script>

<pre class=biblio>
{
    "MoFH4": {
        "authors": ["Modi Mo"],
        "href": "https://devblogs.microsoft.com/cppblog/making-cpp-exception-handling-smaller-x64/",
        "title": "Making C++ Exception Handling Smaller On x64"
    },
    "P0939R2": {
        "authors": ["H. Hinnant", "R. Orr", "B. Stroustrup", "D. Vandevoorde", "M. Wong"],
        "href": "http://wg21.link/P0939R2",
        "title": "Direction for ISO C++"
    },
    "Bakhvalov": {
        "authors": ["Denis Bakhvalov"],
        "href": "https://dendibakh.github.io/blog/2018/01/18/Code_alignment_issues",
        "title": "Code alignment issues."
    },
    "MCA": {
      "href": "https://llvm.org/docs/CommandGuide/llvm-mca.html",
      "title": "llvm-mca - LLVM Machine Code Analyzer"
    },
    "ECharts": {
      "href": "https://ecomfe.github.io/echarts-doc/public/en/index.html",
      "title": "ECharts"
    }
     
}
</pre>
